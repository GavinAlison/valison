ArrayList如何进行管理内部数据
	add操作，首先确定添加操作之后数组的长度是否大于初始化数组的大小，默认是为10,
		如果大于10，那么数据列表将会创建一个更大的数据，这个新数组的长度为原数组的长度的1.5倍+1，
		然后将对象从较小数组拷贝到新数组中
		
	ArrayList<T>()
		构造一个空数组列表
	ArrayList<T>(int initialCapacity)
		用指定容量initialCapacity构造一个空数组列表
	boolean add(T obj)
		在数组列表尾部添加一个元素，永远返回true
	int size()
		返回存储在数据列表中的当前元素的数量，这个值将小于或等于容量
	void ensureCapacity(int capacity)
		确保数组列表在不重新分配存储空间的情况下就能够保存给定数量的元素
		确定容量的大小
	int size()
		返回存储在数组列表中当前元素数量
	void trimToSize()
		将数组列表的存储容量消减到当前元素的数量	
	
list > ArrayList<Object>
	管理着由对象引用组成的一个内部数组。
	存储结构：动态的数组，可变长度的数组
	存储结果形式： [obj1, obj2, obj3, obj4, ....]
	
	或者 [ {key1=value1}, {key2=value2}, {key3=value3}, ...]

	List list =new  ArrayList();
	存:  list.add(obj1);
	     list.set(index, obj1);// 0<index<=size-1
	取:  list.get(index);//       0<index<=size-1
		 
	
	特点：  优点， 在数组列表尾部添加元素快,访问元素快
		   缺点， 在数组列表的中间插入元素，删除元素慢
	
	插入或者删除的特点：在add(n, element);插入元素，在n之后的元素都要向后移动一个位置；
		如果数组列表的大小超过容量，数组列表就需要重新分配存储空间。
		remove(n, element); 删除元素，在n之后的元素都要向前移动一个位置，相应的元素的长度减1
	
	
API：
	void set(int index, T obj)
		设置数组列表指定位置的元素值，这个操作将覆盖这个位置的原有内容。
		index   [0,size()-1]之间
		obj 	新的值
	T get(int index)
		获得指定位置的元素值, index 在[0, size()-1]之间
	void add(int index, T obj)
		向后移动元素，以便插入新元素
	T remove(int index)
		删除一个元素，并将后面的元素向前移动。返回被删除的元素值
	
		





		   
		   
		   