<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

	<bean id="userDao" class="com.alison.spring.aop.UserDao" />
	<bean id="orderDao" class="com.alison.spring.aop.OrderDao" />
	<!-- 切面类 -->
	<bean id="aop" class="com.alison.spring.aop.Aop" />

	<!-- aop配置 -->
	<aop:config>
		<!--
			aop:advisor : 定义spring传统的AOP的切面的，只支持pointcut切入点和一个advice通知<br />
			aop:aspect : 定义AspectJ框架切面的， 可以包含多个pointcut和多个advice
		-->
		<!-- 定义一个切入点表达式： 拦截哪些方法 -->
		<!--
			<aop:pointcut expression="execution(*
			com.alison.spring.g_pointcut.*.*(..))" id="pt"/>
		-->

		<!-- 【拦截所有public方法】 -->
		<!--<aop:pointcut expression="execution(public * *(..))" id="pt"/>-->

		<!-- 【拦截所有save开头的方法 】 -->
		<!--<aop:pointcut expression="execution(* save*(..))" id="pt"/>-->

		<!-- 【拦截指定类的指定方法, 拦截时候一定要定位到方法】 -->
		<!--
			<aop:pointcut expression="execution(public *
			com.alison.spring.g_pointcut.OrderDao.save(..))" id="pt"/>
		-->

		<!-- 【拦截指定类的所有方法】 -->
		<!--
			<aop:pointcut expression="execution(*
			com.alison.spring.g_pointcut.UserDao.*(..))" id="pt"/>
		-->

		<!-- 【拦截指定包，以及其自包下所有类的所有方法】 -->
		<!--<aop:pointcut expression="execution(* cn..*.*(..))" id="pt"/>-->

		<!-- 【多个表达式】 -->
		<!--
			<aop:pointcut expression="execution(*
			com.alison.spring.g_pointcut.UserDao.save()) || execution(*
			com.alison.spring.g_pointcut.OrderDao.save())" id="pt"/>
		-->
		<!--
			<aop:pointcut expression="execution(*
			com.alison.spring.g_pointcut.UserDao.save()) or execution(*
			com.alison.spring.g_pointcut.OrderDao.save())" id="pt"/>
		-->
		<!-- 下面2个且关系的，没有意义 -->
		<!--
			<aop:pointcut expression="execution(*
			com.alison.spring.g_pointcut.UserDao.save()) && execution(*
			com.alison.spring.g_pointcut.OrderDao.save())" id="pt"/>
		-->
		<!--
			<aop:pointcut expression="execution(*
			com.alison.spring.g_pointcut.UserDao.save()) and execution(*
			com.alison.spring.g_pointcut.OrderDao.save())" id="pt"/>
		-->

		<!-- 【取非值】 -->
		<!--
			<aop:pointcut expression="!execution(*
			com.alison.spring.g_pointcut.OrderDao.save())" id="pt"/>
		-->
		<!--
			<aop:pointcut expression=" not execution(*
			com.alison.spring.g_pointcut.OrderDao.save())" id="pt" />
		-->


		<!-- 定义一个切入点表达式： 拦截哪些方法 -->
		<aop:pointcut id="pt"
			expression="execution(* com.alison.spring.aop.IUserDao.*(..))" />

		<!-- 切面 -->
		<aop:aspect id="poincutHand" ref="aop">
			<!-- 定义一个切入点表达式： 拦截哪些方法 -->
			<!--			<aop:pointcut id="pt"-->
			<!--
				expression="execution(* com.alison.spring.aop.HelloWorld.*(..))" />
			-->
			<!-- 环绕通知 -->
			<!-- 前置通知： 在目标方法调用前执行 -->
			<aop:before method="begin" pointcut-ref="pt" />
			<!-- 后置通知： -->
			<aop:after method="after" pointcut-ref="pt" />
			<!-- 返回后通知 -->
			<!-- 异常通知 -->
		</aop:aspect>
	</aop:config>

	<!-- 配置切面	 -->
	<!-- 进行aop相应的配置 -->
	


</beans>